// Generated by CoffeeScript 1.10.0
var dictApp;

dictApp = angular.module('fairyDictApp', ['ngRoute', 'ui.bootstrap', 'ngSanitize']);

dictApp.run(function($rootScope) {
  return $rootScope._ = _;
});

dictApp.controller('dictCtrl', function($scope, $sce) {
  var _handler, queryId, ref, updateRating;
  console.log("[dictCtrl] init");
  $scope.initial = true;
  $scope.querying = false;
  $scope.queryResult = null;
  $scope.historyIndex = -1;
  queryId = null;
  chrome.runtime.sendMessage({
    type: 'dictionary'
  }, function(arg) {
    var allDicts, dictionary;
    dictionary = arg.dictionary, allDicts = arg.allDicts;
    console.log("[dict] all dicts: ", allDicts);
    $scope.allDicts = allDicts;
    $scope.currentDictionary = allDicts.find(function(d) {
      return d.dictName === dictionary;
    });
    if ($scope.currentDictionary == null) {
      $scope.currentDictionary = allDicts[0];
    }
    return $scope.$apply();
  });
  chrome.runtime.sendMessage({
    type: 'setting'
  }, function(setting) {
    return $scope.setting = setting;
  });
  chrome.runtime.sendMessage({
    type: 'getHistory'
  }, function(history) {
    $scope.history = history.reverse();
    $scope.lastHistoryWord = $scope.history[0];
    return $scope.$apply();
  });
  $scope.changeDict = function(dict) {
    var ci, idx;
    ci = $scope.allDicts.findIndex(function(d) {
      return d.dictName === $scope.currentDictionary.dictName;
    });
    if (dict === 'next') {
      idx = (ci + 1) % $scope.allDicts.length;
      $scope.currentDictionary = $scope.allDicts[idx];
    } else if (dict === 'prev') {
      idx = ci > 0 ? ci - 1 : $scope.allDicts.length - 1;
      $scope.currentDictionary = $scope.allDicts[idx];
    } else {
      $scope.currentDictionary = dict;
    }
    return $scope.query(true);
  };
  $scope.selectHistory = function(index) {
    if (index === $scope.historyIndex) {
      return;
    }
    if (index >= $scope.history.length) {
      index = 0;
    }
    $scope.historyIndex = index;
    $scope.word = _.keys($scope.history[index])[0];
    $scope.rating = _.values($scope.history[index])[0];
    updateRating($scope.rating);
    if (index === $scope.history.length - 1) {
      $scope.lastHistoryWord = $scope.history[0];
    } else {
      $scope.lastHistoryWord = $scope.history[index + 1];
    }
    return $scope.query(true);
  };
  $scope.query = function(inHistory) {
    if (!$scope.word || !$scope.currentDictionary) {
      $scope.initial = true;
      return;
    }
    console.log("[dictCtrl] query `" + $scope.word + "` from " + $scope.currentDictionary.dictName);
    $scope.initial = false;
    $scope.querying = true;
    queryId = Date.now();
    return chrome.runtime.sendMessage({
      type: 'query',
      text: $scope.word,
      dictionary: $scope.currentDictionary.dictName,
      queryId: queryId,
      inHistory: inHistory
    });
  };
  if ((ref = chrome.runtime.onMessage) != null) {
    ref.addListener(function(request, sender, sendResponse) {
      if (request.type === 'querying') {
        $scope.initial = false;
        $scope.querying = true;
        $scope.queryResult = null;
        $scope.word = request.text;
        queryId = request.queryId;
      } else if (request.type === 'queryResult') {
        if (queryId === request.queryId) {
          updateRating(request.rating);
          $scope.querying = false;
          $scope.queryResult = $sce.trustAsHtml(request.result);
          $scope.rating = request.rating;
        }
      } else if (request.type === 'history') {
        console.log("history", request.history);
        $scope.history = request.history.reverse();
        $scope.lastHistoryWord = $scope.history[0];
        $scope.historyIndex = -1;
      }
      return $scope.$apply();
    });
  }
  $('#stars').on('starrr:change', function(e, value) {
    var item;
    if ($scope.word) {
      if (value == null) {
        value = 0;
      }
      console.log("[dictCtrl] rating word: " + $scope.word + " " + value);
      chrome.runtime.sendMessage({
        type: 'rating',
        value: value,
        text: $scope.word
      });
      if ($scope.historyIndex >= 0) {
        item = $scope.history[$scope.historyIndex];
        if (item && (item[$scope.word] != null)) {
          return item[$scope.word] = value;
        }
      }
    }
  });
  $('.starrr').starrr({
    numStars: 3
  });
  updateRating = function(value) {
    var obj;
    obj = $(".starrr").data('star-rating');
    obj.options.rating = value;
    return obj.syncRating();
  };
  _handler = function(evt) {
    var a, node;
    node = $(event.target);
    if (node.is('.sound')) {
      a = node.next('audio');
      if (a.length) {
        return a[0].play();
      }
    }
  };
  $(document).mouseover(_handler);
  $(document).click(_handler);
  $(document).keyup(function(evt) {
    var code;
    code = evt.charCode || evt.keyCode;
    if (code === 27) {
      return $('input.dict_input')[0].select();
    }
  });
  $(document).keydown(function(evt) {
    var code, nextKey, nextSK, prevKey, prevSK;
    code = evt.charCode || evt.keyCode;
    prevSK = $scope.setting.prevDictSK1;
    nextSK = $scope.setting.nextDictSK1;
    prevKey = $scope.setting.prevDictKey;
    nextKey = $scope.setting.nextDictKey;
    if (window.utils.checkEventKey(evt, prevSK, null, prevKey)) {
      $scope.changeDict('prev');
    }
    if (window.utils.checkEventKey(evt, nextSK, null, nextKey)) {
      return $scope.changeDict('next');
    }
  });
});
