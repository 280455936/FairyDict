// Generated by CoffeeScript 1.10.0
var dictApp;

dictApp = angular.module('fairyDictApp', ['ngRoute', 'ui.bootstrap', 'ngSanitize']);

dictApp.controller('dictCtrl', function($scope, $sce) {
  var _handler, queryId, ref;
  console.log("[dictCtrl] init");
  $scope.initial = true;
  $scope.querying = false;
  $scope.queryResult = null;
  queryId = null;
  chrome.runtime.sendMessage({
    type: 'dictionary'
  }, function(arg) {
    var allDicts, dictionary;
    dictionary = arg.dictionary, allDicts = arg.allDicts;
    console.log("[dict] all dicts: ", allDicts);
    $scope.allDicts = allDicts;
    $scope.currentDictionary = allDicts.find(function(d) {
      return d.dictName === dictionary;
    });
    if ($scope.currentDictionary == null) {
      $scope.currentDictionary = allDicts[0];
    }
    return $scope.$apply();
  });
  $scope.changeDict = function(dict) {
    var ci, idx;
    ci = $scope.allDicts.findIndex(function(d) {
      return d.dictName === $scope.currentDictionary.dictName;
    });
    if (dict === 'next') {
      idx = (ci + 1) % $scope.allDicts.length;
      $scope.currentDictionary = $scope.allDicts[idx];
    } else if (dict === 'prev') {
      idx = ci > 0 ? ci - 1 : $scope.allDicts.length - 1;
      $scope.currentDictionary = $scope.allDicts[idx];
    } else {
      $scope.currentDictionary = dict;
    }
    return $scope.query();
  };
  $scope.query = function() {
    if (!$scope.word || !$scope.currentDictionary) {
      return;
    }
    console.log("[dictCtrl] query `" + $scope.word + "` from " + $scope.currentDictionary.dictName);
    $scope.initial = false;
    $scope.querying = true;
    queryId = Date.now();
    return chrome.runtime.sendMessage({
      type: 'query',
      text: $scope.word,
      dictionary: $scope.currentDictionary.dictName,
      queryId: queryId
    });
  };
  if ((ref = chrome.runtime.onMessage) != null) {
    ref.addListener(function(request, sender, sendResponse) {
      if (request.type === 'querying') {
        $scope.initial = false;
        $scope.querying = true;
        $scope.queryResult = null;
        $scope.word = request.text;
        queryId = request.queryId;
      } else if (request.type === 'queryResult') {
        if (queryId === request.queryId) {
          $scope.querying = false;
          $scope.queryResult = $sce.trustAsHtml(request.result);
        }
      }
      return $scope.$apply();
    });
  }
  _handler = function(evt) {
    var a, node;
    node = $(event.target);
    if (node.is('.sound')) {
      a = node.next('audio');
      if (a.length) {
        return a[0].play();
      }
    }
  };
  $(document).mouseover(_handler);
  $(document).click(_handler);
  $(document).keyup(function(evt) {
    var code;
    code = evt.charCode || evt.keyCode;
    if (code === 27) {
      return $('input.dict_input')[0].select();
    }
  });
  $(document).keydown(function(evt) {
    var code;
    code = evt.charCode || evt.keyCode;
    if (evt.ctrlKey && evt.keyCode === 37) {
      $scope.changeDict('prev');
    }
    if (evt.ctrlKey && evt.keyCode === 39) {
      return $scope.changeDict('next');
    }
  });
});
