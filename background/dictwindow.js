// Generated by CoffeeScript 1.10.0
define(["jquery", "utils", "background/setting", "background/dict.js", "background/storage"], function($, utils, setting, dict, storage) {
  var defaultWindowUrl, dictInitedDfd, dictWindowManager, injectContentDfd, updateWindowDfd;
  console.log("[dictwindow] init");
  defaultWindowUrl = 'http://blog.riverrun.xyz/fairydict.html';
  updateWindowDfd = null;
  injectContentDfd = null;
  dictInitedDfd = null;
  dictWindowManager = {
    w: null,
    tid: null,
    url: null,
    word: null,
    defaultWidth: 630,
    defaultHeight: 700,
    open: function() {
      var dfd, left, top, url;
      dfd = $.Deferred();
      left = (screen.width / 2) - (dictWindowManager.defaultWidth / 2);
      top = (screen.height / 2) - (dictWindowManager.defaultHeight / 2);
      url = 'http://blog.riverrun.xyz/fairydict.html';
      if (!this.w) {
        this.beforeUpdateUrl();
        chrome.windows.create({
          url: defaultWindowUrl,
          type: 'popup',
          width: dictWindowManager.defaultWidth,
          height: dictWindowManager.defaultHeight,
          left: left,
          top: top
        }, (function(_this) {
          return function(win) {
            _this.w = win;
            _this.tid = _this.w.tabs[0].id;
            _this.url = defaultWindowUrl;
            return dfd.resolve();
          };
        })(this));
      } else {
        chrome.windows.update(dictWindowManager.w.id, {
          focused: true
        });
        dfd.resolve();
      }
      return dfd;
    },
    sendMessage: function(msg) {
      if (this.tid) {
        return chrome.tabs.sendMessage(this.tid, msg);
      }
    },
    lookup: function(text) {
      var dictName;
      dictName = setting.getValue('dictionary');
      return this.open().done((function(_this) {
        return function() {
          if (text) {
            _this.sendMessage({
              type: 'querying',
              text: text
            });
            return _this.queryDict(text, dictName);
          }
        };
      })(this));
    },
    queryDict: function(text, dictName, inHistory) {
      this.word = text;
      if (!inHistory) {
        this.sendMessage({
          type: 'history',
          history: storage.history
        });
      }
      console.log("[dictwindow] query " + this.word + " from " + dictName);
      return dict.query(text, dictName).then(this.sendQueryResult.bind(this));
    },
    sendQueryResult: function(result) {
      var item, udfd;
      item = storage.isInHistory(this.word);
      if (result) {
        udfd = this.updateUrl(result.windowUrl || defaultWindowUrl);
      }
      return $.when(updateWindowDfd, dictInitedDfd, udfd).then((function(_this) {
        return function() {
          console.log("[dictwindow] send query result");
          _this.sendMessage({
            type: 'queryResult',
            result: result,
            text: _this.word,
            inHistory: item != null,
            rating: item != null ? item[_this.word] : void 0
          });
          if (!item && _this.word.split(/\s+/).length <= 5) {
            return storage.addHistory(_this.word);
          }
        };
      })(this));
    },
    injectResources: function() {
      var inject, res, scripts, styles;
      styles = ["css/bootstrap.css", "bower_components/angular-ui/build/angular-ui.css", "bower_components/angular-bootstrap/ui-bootstrap-csp.css", "css/font-awesome.css", "css/dictheader.css"];
      scripts = ['bower_components/jquery/dist/jquery.js', 'bower_components/underscore/underscore.js', "bower_components/angular/angular.js", "bower_components/angular-ui/build/angular-ui.js", "bower_components/angular-sanitize/angular-sanitize.js", "bower_components/angular-bootstrap/ui-bootstrap.js", "utils.js", "js/starrr.js", "loader.js", "dict.js"];
      inject = (function(_this) {
        return function(t, files, index) {
          var dfd, file;
          if (files == null) {
            files = [];
          }
          if (index == null) {
            index = 0;
          }
          dfd = $.Deferred();
          file = files[index];
          if (file) {
            console.log("[dictwindow] inject " + file);
            chrome.tabs[t](_this.tid, {
              file: file
            }, function() {
              return inject(t, files, index + 1).then(function() {
                return dfd.resolve();
              });
            });
          } else {
            dfd.resolve();
          }
          return dfd;
        };
      })(this);
      res = dict.getDictResources(setting.getValue('dictionary'));
      return inject('insertCSS', res != null ? res.styles : void 0).then((function(_this) {
        return function() {
          return inject('insertCSS', styles).then(function() {
            return inject('executeScript', scripts).then(function() {
              return inject('executeScript', res != null ? res.scripts : void 0);
            });
          });
        };
      })(this));
    },
    updateUrl: function(url) {
      var outDfd;
      outDfd = $.Deferred();
      if (url && this.url !== url) {
        console.log("[dictwindow] update url: " + url);
        this.url = url;
        this.beforeUpdateUrl().then((function(_this) {
          return function() {
            console.log("[dictwindow] updated url: " + url);
            return outDfd.resolve(true);
          };
        })(this));
        chrome.tabs.update(this.tid, {
          url: url,
          active: true
        });
        return outDfd;
      } else {
        return outDfd.resolve(false);
      }
    },
    beforeUpdateUrl: function() {
      injectContentDfd = $.Deferred((function(_this) {
        return function(dfd) {
          return dfd.then(function() {
            return _this.injectResources().then(function() {
              return updateWindowDfd.resolve();
            });
          });
        };
      })(this));
      dictInitedDfd = $.Deferred();
      updateWindowDfd = $.Deferred();
      return updateWindowDfd;
    },
    onContentInjected: function(url) {
      var d, w;
      console.log("[dictwindow] manifest's content scripts injected from url: " + url);
      if ((injectContentDfd != null ? injectContentDfd.state() : void 0) === 'pending') {
        return injectContentDfd.resolve();
      } else if (url) {
        d = setting.getValue('dictionary');
        w = dict.getWordFromUrl(url, d);
        this.url = url;
        if (w) {
          this.word = w;
        } else {
          w = this.word;
        }
        updateWindowDfd = $.Deferred();
        console.log("[dictwindow] reload " + w + " url " + url);
        return this.injectResources().then((function(_this) {
          return function() {
            _this.sendQueryResult();
            return updateWindowDfd.resolve();
          };
        })(this));
      }
    },
    onDictInited: function() {
      console.log("[dictwindow] dict inited");
      if (dictInitedDfd != null) {
        dictInitedDfd.resolve();
      }
      return this.sendMessage({
        type: 'history',
        history: storage.history
      });
    }
  };
  chrome.windows.onRemoved.addListener(function(wid) {
    var ref;
    if (((ref = dictWindowManager.w) != null ? ref.id : void 0) === wid) {
      dictWindowManager.w = null;
      dictWindowManager.tid = null;
      updateWindowDfd = null;
      injectContentDfd = null;
      return dictInitedDfd = null;
    }
  });
  return dictWindowManager;
});
